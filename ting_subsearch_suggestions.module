<?php

/**
 * @file
 * Ting subsearch using suggestion services: Opensuggestion and KPI-Webtrends.
 */

use GuzzleHttp\Client as HttpClient;
use GuzzleHttp\Exception\ClientException as GuzzleClientException;

module_load_include('inc', 'ting_subsearch_suggestions', 'ting_subsearch_suggestions.admin');

/**
 * Implements hook_ting_search_results_prefix().
 */
function ting_subsearch_suggestions_ting_search_results_prefix($keys, $conditions, $results) {
  $service = variable_get('ting_subsearch_suggestions_service', '');

  if (!empty($service)) {
    $message = '';

    if (!isset($results->numTotalObjects)) {
      return $message;
    }

    // When a zero-hit search is executed and we're able to match "correct"
    // keys, a new search is done with the "correct" keys.
    // Then use the query-parameter original-keys to display what was done to
    // the visitor.
    $parameters = drupal_get_query_parameters();
    if (isset($parameters['original-search'])) {
      $msg = t('The search for "!original-keys" returned 0 hits. Showing results for "!keys" instead, which returned !num-results hits.', array(
        '!original-keys' => $parameters['original-search'],
        '!keys' => $keys,
        '!num-results' => $results->numTotalObjects,
      ));

      $message = '<div class="messages search-field-in-content--message">' . $msg . '</div>';
    }

    if ($results->numTotalObjects == 0) {
      // The search result returned zero-hits so we need to see if "correct" keys
      // can yield a better result.
      $search_result = drupal_static('ting_search_results');
      // Find suggestions for "correct" search phrase.
      $suggestion = ting_subsearch_common_suggested_keys($keys, 'ting_subsearch_suggestions_suggest_keys');

      if (!empty($suggestion)) {
        // Do secondary search for "correct" keys.
        $secondary_result = ting_subsearch_common_do_secondary_search($suggestion);
        // Only redirect to "correct" keys search if it has a positive result.
        if ($secondary_result->numTotalObjects > 0) {
          $additional_query = array(
            'original-search' => $search_result->search_key,
          );
          $params['query'] = ting_subsearch_common_query_params(variable_get("ting_subsearch_{$service}_additional_url_params_0_hit", ""), $additional_query);
          drupal_goto('search/ting/' . strtolower($suggestion), $params);
        }
      }
    }

    if ($results->numTotalObjects <= variable_get("ting_subsearch_{$service}_trigger_limit", 5)) {
      $suggestion = ting_subsearch_common_suggested_keys($keys, 'ting_subsearch_suggestions_suggest_keys');

      if ($service == 'kpi') {
        if (strpos($suggestion, 'ting_search:') !== FALSE) {
          $clear_suggestion = explode(':', $suggestion);
          $suggestion = $clear_suggestion[1];
        }
      }
      if ($suggestion) {
        // Do additional search.
        $suggested_result = ting_subsearch_common_do_secondary_search($suggestion);
        if ($suggested_result->numTotalObjects >= variable_get("ting_subsearch_{$service}_message_limit", 10)) {

          // Set message!
          $msg = t('The search for "!keys" returned !num-results hits. Did you mean "!suggested-keys-link?" which will return !suggested-num-results hits.', array(
            '!suggested-keys-link' => l(strtolower($suggestion), '/search/ting/' . strtolower($suggestion), array('query' => ting_subsearch_common_query_params(variable_get("ting_subsearch_{$service}_additional_url_params_inlimit", "")))),
            '!suggested-num-results' => $suggested_result->numTotalObjects,
            '!keys' => $keys,
            '!num-results' => $results->numTotalObjects,
          ));
          $message = '<div class="messages search-field-in-content--message">' . $msg . '</div>';
        }
      }
    }
    return $message;
  }
}

/**
 * Find the first suggestion for given keys.
 *
 * @param string $keys
 *   The original keys that you want to find suggestion for.
 *
 * @return string
 *   The suggestion.
 */
function ting_subsearch_suggestions_suggest_keys($keys) {

  $service = variable_get('ting_subsearch_suggestions_service', '');

  switch ($service) {
    case 'os':
      if (!variable_get('ting_search_autocomplete_suggestion_url', FALSE)) {
        return FALSE;
      }

      $settings = ting_search_autocomplete_settings();
      $url = variable_get('ting_search_autocomplete_suggestion_url', FALSE) . 'rest/facetSpell';

      $params = $options['query'] = array('query' => check_plain($keys)) + $settings;
      $options['maxTime'] = 300;

      try {
        $client = new HttpClient();
        $response = $client->get(
          $url,
          array(
            'query' => $params,
            'headers' => array(
              'Accept' => 'application/json',
            ),
          )
        );
        $result = json_decode($response->getBody());
      }
      catch (GuzzleClientException $e) {
        throw new Exception($e->getMessage(), $e->getCode(), $e);
      }

      $items = array();
      // First child of $result changes name from suggestions to suggestion when
      // switching between version 3.0 and 3.5.
      if (!empty(current($result))) {
        foreach (current($result) as $suggestion) {
          return $suggestion->phrase;
        }
      }
      if (empty($items)) {
        return FALSE;
      }
      break;

    case 'kpi':
      $kpi_index = db_select('ting_subsearch_kpi_index_popular_keys', 'k')
        ->fields('k')
        ->condition('numtotalsearches', variable_get('ting_subsearch_kpi_minimum_searches', 10), '>')
        ->orderBy('numtotalsearches', 'DESC')
        ->execute();

      while ($record = $kpi_index->fetchAssoc()) {
        $distance = levenshtein(strtolower($keys), strtolower($record['popular_keys']));

        if ($distance > 0 && $distance < variable_get('ting_subsearch_kpi_distance', 0)) {
          return $record['popular_keys'];
        }
      }
      break;
  }
}

/**
 * Implements hook_cron().
 */
function ting_subsearch_suggestions_cron() {
  $service = variable_get('ting_subsearch_suggestions_service', '');

  if (!empty($service) && $service == 'kpi') {
    // Ensure that local data is only renewed once a day.
    if (!(variable_get('subsearch_kpi_cron_run', 0) < time())) {
      return;
    }

    $url = variable_get('ting_subsearch_kpi_webservice_endpoint', NULL);
    $params['start_period'] = variable_get('ting_subsearch_kpi_start_period', NULL);
    $params['end_period'] = variable_get('ting_subsearch_kpi_end_period', NULL);
    $params['format'] = variable_get('subsearch_kpi_format', NULL);
    $params['language'] = variable_get('subsearch_kpi_language', NULL);

    $account = variable_get('ting_subsearch_kpi_account', NULL);
    $password = variable_get('ting_subsearch_kpi_password', NULL);

    if (empty($url) || empty($account) || empty($password)) {
      watchdog('ting_subsearch_opensuggestions', 'KPI: Module not configured properly', array(), WATCHDOG_WARNING);
      return;
    }

    try {
      $client = new HttpClient();
      $response = $client->get(
        $url,
        array(
          'query' => $params,
          'headers' => array(
            'Accept' => 'application/json',
          ),
          'auth' => array(
            $account,
            $password,
          ),
        )
      );
      $result = json_decode($response->getBody());
    } catch (GuzzleClientException $e) {
      throw new Exception($e->getMessage(), $e->getCode(), $e);
    }

    if (!empty($result)) {
      ting_subsearch_suggestions_insert_records($result);
      variable_set('subsearch_cron_run', time() + (60 * 60 * 24));
      watchdog('ting_subsearch_suggestions', 'Data fetched from KPI. Will re-run in a day.', array(), WATCHDOG_INFO);
    }
    else {
      watchdog('ting_subsearch_suggestions', 'No data fetched from feed', array(), WATCHDOG_WARNING);
    }
  }
}

/**
 * Insert kpi keys into table.
 */
function ting_subsearch_suggestions_insert_records($json) {

  db_truncate('ting_subsearch_kpi_index_popular_keys')->execute();

  foreach ($json->data[0]->SubRows[0] as $keys => $data) {
    // Avoid keys that didn't have successful searches, are longer than 255
    // chars and have an equalsign as part of it.
    if ($data->measures->SuccessfulSearches > 0 && strlen($keys) < 255 && !strpos('=', $keys)) {
      $query = db_insert('ting_subsearch_kpi_index_popular_keys')->fields(
        array(
          'id' => md5($keys),
          'popular_keys' => $keys,
          'numtotalsearches' => (int) $data->measures->SuccessfulSearches,
        )
      );
      $query->execute();
    }
  }
}
